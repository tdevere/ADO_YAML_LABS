# ‚ùå BROKEN - SCENARIO 9: ENVIRONMENT DEPLOYMENT ERRORS# ‚úÖ FIXED - SCENARIO 9: ENVIRONMENT DEPLOYMENT ERRORS

# Common Issue: ~15% of pipeline support tickets# Fixes: Proper environment references, stage dependencies, deployment jobs, environment variables

# Error Type: Environment reference errors, missing approvals, incorrect stage dependencies

trigger:

trigger:  branches:

  branches:    include:

    include:      - main

      - main

# Fixed: Environment-specific variables defined at pipeline level

# Incorrect: Missing environment-specific variablesvariables:

variables:  buildConfig: 'Release'

  buildConfig: 'Release'  # These would typically come from variable groups or environment variables

  # Missing: apiUrl, deploymentTarget variables per environment  devApiUrl: 'https://api-dev.example.com'

  stagingApiUrl: 'https://api-staging.example.com'

stages:  prodApiUrl: 'https://api.example.com'

  - stage: Build

    displayName: 'Build Application'stages:

    jobs:  - stage: Build

      - job: BuildJob    displayName: 'Build Application'

        displayName: 'Build and Test'    jobs:

        pool:      - job: BuildJob

          name: 'Default'        displayName: 'Build and Test'

        steps:        pool:

          - task: UseDotNet@2          name: 'Default'

            displayName: 'Install .NET'        steps:

            inputs:          - task: UseDotNet@2

              version: '6.x'            displayName: 'Install .NET'

            inputs:

          - task: DotNetCoreCLI@2              version: '6.x'

            displayName: 'Build Project'

            inputs:          - task: DotNetCoreCLI@2

              command: 'build'            displayName: 'Build Project'

              projects: 'test-project/BuildTestApp.csproj'            inputs:

              configuration: $(buildConfig)              command: 'build'

              projects: 'test-project/BuildTestApp.csproj'

          - task: DotNetCoreCLI@2              configuration: $(buildConfig)

            displayName: 'Publish Artifacts'

            inputs:          - task: DotNetCoreCLI@2

              command: 'publish'            displayName: 'Publish Artifacts'

              projects: 'test-project/BuildTestApp.csproj'            inputs:

              arguments: '--configuration $(buildConfig) --output $(Build.ArtifactStagingDirectory)'              command: 'publish'

              publishWebProjects: false              projects: 'test-project/BuildTestApp.csproj'

              arguments: '--configuration $(buildConfig) --output $(Build.ArtifactStagingDirectory)'

          - task: PublishBuildArtifacts@1              publishWebProjects: false

            displayName: 'Publish Build Artifacts'

            inputs:          - task: PublishBuildArtifacts@1

              PathtoPublish: '$(Build.ArtifactStagingDirectory)'            displayName: 'Publish Build Artifacts'

              ArtifactName: 'drop'            inputs:

              PathtoPublish: '$(Build.ArtifactStagingDirectory)'

  # Incorrect: Missing stage dependency (Deploy_Dev should depend on Build)              ArtifactName: 'drop'

  - stage: Deploy_Dev

    displayName: 'Deploy to Development'  # Fixed: Stage dependency on Build stage

    jobs:  - stage: Deploy_Dev

      - job: DeployDevJob    displayName: 'Deploy to Development'

        displayName: 'Deploy to Dev Environment'    dependsOn: Build

        pool:    jobs:

          name: 'Default'      # Fixed: Using deployment job type with environment reference

        steps:      - deployment: DeployDevJob

          # Incorrect: Missing DownloadBuildArtifacts task        displayName: 'Deploy to Dev Environment'

          - script: |        pool:

              echo "Deploying to Development environment"          vmImage: 'ubuntu-latest'

              echo "Configuration: $(buildConfig)"        # Fixed: Reference to Development environment (enables approvals, tracking)

              # Missing: Environment-specific variables        environment: 'Development'

            displayName: 'Simulate Dev Deployment'        strategy:

          runOnce:

  - stage: Deploy_Staging            deploy:

    displayName: 'Deploy to Staging'              steps:

    # Incorrect: Missing dependency on Deploy_Dev stage                # Fixed: Download artifacts from Build stage

    jobs:                - task: DownloadBuildArtifacts@1

      # Incorrect: Missing deployment job type and environment reference                  displayName: 'Download Artifacts'

      - job: DeployStagingJob                  inputs:

        displayName: 'Deploy to Staging Environment'                    buildType: 'current'

        pool:                    downloadType: 'single'

          name: 'Default'                    artifactName: 'drop'

        steps:                    downloadPath: '$(System.ArtifactsDirectory)'

          - task: DownloadBuildArtifacts@1

            displayName: 'Download Artifacts'                - script: |

            inputs:                    echo "Deploying to Development environment"

              buildType: 'current'                    echo "Configuration: $(buildConfig)"

              downloadType: 'single'                    echo "API URL: $(devApiUrl)"

              artifactName: 'drop'                    echo "Artifacts downloaded to: $(System.ArtifactsDirectory)"

              downloadPath: '$(System.ArtifactsDirectory)'                  displayName: 'Simulate Dev Deployment'



          - script: |  - stage: Deploy_Staging

              echo "Deploying to Staging environment"    displayName: 'Deploy to Staging'

              echo "Configuration: $(buildConfig)"    # Fixed: Correct dependency name matching the stage name

            displayName: 'Simulate Staging Deployment'    dependsOn: Deploy_Dev

    jobs:

  - stage: Deploy_Production      # Fixed: Using deployment job type with environment reference

    displayName: 'Deploy to Production'      - deployment: DeployStagingJob

    # Incorrect: Missing dependency on Deploy_Staging        displayName: 'Deploy to Staging Environment'

    jobs:        pool:

      - job: DeployProdJob          vmImage: 'ubuntu-latest'

        displayName: 'Deploy to Production Environment'        # Fixed: Reference to Staging environment

        pool:        environment: 'Staging'

          name: 'Default'        strategy:

        # Incorrect: Missing condition to ensure previous stages succeeded          runOnce:

        steps:            deploy:

          - task: DownloadBuildArtifacts@1              steps:

            displayName: 'Download Artifacts'                - task: DownloadBuildArtifacts@1

            inputs:                  displayName: 'Download Artifacts'

              buildType: 'current'                  inputs:

              downloadType: 'single'                    buildType: 'current'

              artifactName: 'drop'                    downloadType: 'single'

              downloadPath: '$(System.ArtifactsDirectory)'                    artifactName: 'drop'

                    downloadPath: '$(System.ArtifactsDirectory)'

          - script: |

              echo "Deploying to Production environment"                - script: |

              echo "Configuration: $(buildConfig)"                    echo "Deploying to Staging environment"

            displayName: 'Simulate Production Deployment'                    echo "Configuration: $(buildConfig)"

                    echo "API URL: $(stagingApiUrl)"
                    echo "Artifacts downloaded to: $(System.ArtifactsDirectory)"
                  displayName: 'Simulate Staging Deployment'

  - stage: Deploy_Production
    displayName: 'Deploy to Production'
    # Fixed: Dependency on Deploy_Staging stage
    dependsOn: Deploy_Staging
    # Fixed: Condition to ensure staging deployment succeeded
    condition: succeeded('Deploy_Staging')
    jobs:
      # Fixed: Using deployment job type with environment reference
      - deployment: DeployProdJob
        displayName: 'Deploy to Production Environment'
        pool:
          vmImage: 'ubuntu-latest'
        # Fixed: Reference to Production environment (can have manual approvals)
        environment: 'Production'
        strategy:
          runOnce:
            deploy:
              steps:
                - task: DownloadBuildArtifacts@1
                  displayName: 'Download Artifacts'
                  inputs:
                    buildType: 'current'
                    downloadType: 'single'
                    artifactName: 'drop'
                    downloadPath: '$(System.ArtifactsDirectory)'

                - script: |
                    echo "Deploying to Production environment"
                    echo "Configuration: $(buildConfig)"
                    echo "API URL: $(prodApiUrl)"
                    echo "Artifacts downloaded to: $(System.ArtifactsDirectory)"
                    echo "üöÄ Production deployment complete!"
                  displayName: 'Simulate Production Deployment'
